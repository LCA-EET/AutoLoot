	/**
	 * Patch function. Converts any decimal number into a hexadecimal number.
	 * INT_VAR value      The decimal number to convert.
	 * INT_VAR minDigits  Minimum number of digits for the returned hex value. (default: 1)
	 * INT_VAR prefix     A flag that indicates whether the returned number will be prefixed with "0x". (default: 0)
	 * RET hexNumber      The converted hexadecimal number as string.
	 */
	DEFINE_PATCH_FUNCTION TO_HEX_NUMBER
	INT_VAR
	  value     = 0
	  minDigits = 1
	  prefix    = 0
	RET
	  hexNumber
	BEGIN
	  SET minDigits = (minDigits < 1) ? 1 : minDigits
	  SET minDigits = (minDigits > 8) ? 8 : minDigits
	  TEXT_SPRINT hexNumber ~~
	  PATCH_DEFINE_ARRAY digit BEGIN ~0~ ~1~ ~2~ ~3~ ~4~ ~5~ ~6~ ~7~ ~8~ ~9~ ~a~ ~b~ ~c~ ~d~ ~e~ ~f~ END

	  PATCH_IF (value < 0) BEGIN
		SET signed = 1
		SET value = 0 - value
	  END ELSE BEGIN
		SET signed = 0
	  END

	  WHILE (value != 0) BEGIN
		SET curDigit = value BAND 0xf
		SET value = value BLSR 4
		TEXT_SPRINT hexDigit $EVAL digit(~%curDigit%~)
		TEXT_SPRINT hexNumber ~%hexDigit%%hexNumber%~
	  END

	  WHILE (STRING_LENGTH ~%hexNumber%~ < minDigits) BEGIN
		TEXT_SPRINT hexNumber ~0%hexNumber%~
	  END

	  PATCH_IF (prefix) BEGIN
		TEXT_SPRINT hexNumber ~0x%hexNumber%~
	  END

	  PATCH_IF (signed) BEGIN
		TEXT_SPRINT hexNumber ~-%hexNumber%~
	  END
	END

	// Action version of TO_HEX_NUMBER
	DEFINE_ACTION_FUNCTION TO_HEX_NUMBER
	INT_VAR
	  value     = 0
	  minDigits = 1
	  prefix    = 0
	RET
	  hexNumber
	BEGIN
	  OUTER_PATCH ~~ BEGIN
		LPF TO_HEX_NUMBER INT_VAR value = value minDigits = minDigits prefix = prefix RET hexNumber END
	  END
	END

	/**
	 * Patch function. Checks if an array key exists, and returns the value associated with said key. 
	 * INT_VAR key         The key to check for.
	 * STR_VAR array_name  The name of the array to check.
	 * RET result          1 if array contains key, 0 if array doesn't contain key.
	 */
	DEFINE_PATCH_FUNCTION ARRAY_GET_VALUE
	INT_VAR
		key = 0
	STR_VAR
		array_name = ~~
	RET
		exists
		value
	BEGIN
		PATCH_IF VARIABLE_IS_SET $~%array_name%~(~%key%~) BEGIN
			exists = 1
			PATCH_IF IS_AN_INT $~%array_name%~(~%key%~) BEGIN
				SET value = $~%array_name%~(~%key%~)
			END ELSE BEGIN
				TEXT_SPRINT value $~%array_name%~(~%key%~)
			END
		END ELSE BEGIN
			exists = 0
			value = 0
		END
	END
	
	// Action version of ARRAY_GET_VALUE
	DEFINE_ACTION_FUNCTION ARRAY_GET_VALUE
	INT_VAR
		key   = 0
	STR_VAR
		array_name = ~~
	RET
		exists
		value
	BEGIN
		OUTER_PATCH ~~ BEGIN
			LPF ARRAY_GET_VALUE INT_VAR key = key STR_VAR array_name = EVAL ~%array_name%~ RET exists value END
		END
	END
	
	// STRING_REPLACE
	DEFINE_PATCH_FUNCTION STRING_REPLACE
	STR_VAR
		string = ~~
		to_replace = ~~
		with = ~~
	RET
		replaced_string
	BEGIN

		TEXT_SPRINT replaced_string ~~
		SET to_replace_length = STRING_LENGTH ~%to_replace%~
		SET last_found_index = (0 - to_replace_length)
		SET found_index = INDEX (EXACT_MATCH ~%to_replace%~ ~%string%~)
		
		WHILE (found_index != (0 - 1)) BEGIN
		
			PATCH_IF (found_index > 0) BEGIN
			
				SET before_substring_start = last_found_index + to_replace_length
				SET before_substring_length = found_index - last_found_index - to_replace_length
				LPF SUBSTRING INT_VAR start = before_substring_start length = before_substring_length STR_VAR string = EVAL ~%string%~ RET before_substring = substring END
				TEXT_SPRINT replaced_string ~%replaced_string%%before_substring%~
			END
		
			TEXT_SPRINT replaced_string ~%replaced_string%%with%~
			SET last_found_index = found_index
			SET found_index = INDEX (EXACT_MATCH ~%to_replace%~ ~%string%~ found_index + 1)
		END
	
		SET string_length = STRING_LENGTH ~%string%~
		SET after_substring_start = last_found_index + to_replace_length
		SET after_substring_length = string_length - last_found_index - to_replace_length
		LPF SUBSTRING INT_VAR start = after_substring_start length = after_substring_length STR_VAR string = EVAL ~%string%~ RET after_substring = substring END
		TEXT_SPRINT replaced_string ~%replaced_string%%after_substring%~
	END
	
	// Action version of STRING_REPLACE
	DEFINE_ACTION_FUNCTION STRING_REPLACE
	STR_VAR
		string = ~~
		to_replace = ~~
		with = ~~
	RET
		replaced_string
	BEGIN
		OUTER_PATCH ~~ BEGIN
			LPF STRING_REPLACE STR_VAR string = EVAL ~%string%~ to_replace = EVAL ~%to_replace%~ with = EVAL ~%with%~ RET replaced_string END
		END
	END
	
	DEFINE_ACTION_FUNCTION PROMPT_USER
	STR_VAR
		to_prompt = ~~
		accepted_responses = ~~
	RET
		response
	BEGIN
		PRINT ~%to_prompt%~
		ACTION_READLN response
		ACTION_IF NOT VARIABLE_IS_SET $~%accepted_responses%~(~%response%~) BEGIN
			LAF PROMPT_USER STR_VAR to_prompt = EVAL ~%to_prompt%~ accepted_responses = EVAL ~%accepted_responses%~ RET response END
		END
	END
	
	DEFINE_PATCH_FUNCTION GET_BIT
	INT_VAR
		number = 0
		nth_bit = 0
	RET
		bit_value
	BEGIN
		SET bit_value = (number >> nth_bit) & 1
	END
	